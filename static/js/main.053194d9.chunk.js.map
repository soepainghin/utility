{"version":3,"sources":["Componenet/Alert.js","Componenet/Formtext.js","Componenet/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","class","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Formtext","useState","change","setchange","className","mode","heading","for","style","backgroundColor","color","id","placeholder","e","text","target","value","length","onClick","showAlert","document","getElementById","select","navigator","clipboard","writeText","newtext","split","join","Navbar","href","width","height","exact","to","onChange","toggle","App","setmode","setalert","message","setTimeout","path","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.053194d9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const capitalize=(word)=>{\r\n    const lower=word.toLowerCase()\r\n    return lower.charAt(0).toUpperCase()+lower.slice(1)\r\n  }\r\n    return (\r\n       props.alert &&<div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>   {props.alert.msg}\r\n       \r\n       \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from \"react\";\r\n\r\n\r\nfunction Formtext(props) {\r\n \r\n  const [change, setchange] = useState(\"Enter\");\r\n  const changebtn = (e) => {\r\n    const text = e.target.value;\r\n    setchange(text);\r\n   \r\n  };\r\n  const uppercase = () => {\r\n    setchange(change.toUpperCase());\r\n    props.showAlert(\"converted to uppercase\",\"success\")\r\n\r\n  };\r\n  const lowercase = () => {\r\n    setchange(change.toLowerCase());\r\n    props.showAlert(\"converted to uppercase\",\"success\")\r\n  };\r\n  const deletetext = () => {\r\n    setchange(\" \");\r\n    props.showAlert(\"converted to uppercase\",\"danger\")\r\n  };\r\n  const copytext = () => {\r\n    const text = document.getElementById(\"text\").select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"converted to uppercase\",\"success\")\r\n  };\r\n  const extratext = () => {\r\n    const newtext = change.split(/[ ]+/);\r\n    setchange(newtext.join(\"\"));\r\n    props.showAlert(\"converted to uppercase\",\"success\")\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1 className={`text-${props.mode === \"light\" ? \"dark\" : \"light\"} mx-2`}>\r\n        {props.heading}\r\n      </h1>\r\n      <div className=\"mb-3\">\r\n        <label for=\"exampleFormControlTextarea1\" className=\"form-label\"></label>\r\n        <textarea\r\n          style={{\r\n            backgroundColor: props.mode === \"dark\" ? \"gray\" : \"white\",\r\n            color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n          }}\r\n          id=\"text\"\r\n          placeholder=\"Enter your text\"\r\n          className=\"form-control  \"\r\n          id=\"exampleFormControlTextarea1\"\r\n          rows=\"8\"\r\n          name=\"text\"\r\n          value={change}\r\n          onChange={changebtn}\r\n        ></textarea>\r\n      </div>\r\n      <button className={`btn btn-primary mx-1 ${change.length > 0 ? \" \" : \"disabled \"}`} onClick={uppercase}>\r\n        {\" \"}\r\n        convert to appercase{\" \"}\r\n      </button>\r\n      <button className={`btn btn-primary mx-1 ${change.length > 0 ? \" \" : \"disabled \"}`} onClick={lowercase}>\r\n        {\" \"}\r\n        convert to lowercase{\" \"}\r\n      </button>\r\n      <button  className={`btn btn-primary mx-1 ${change.length > 0 ? \" \" : \"disabled \"}`} onClick={deletetext}>\r\n        {\" \"}\r\n        delete text\r\n      </button>\r\n      <button  className={`btn btn-primary mx-1 ${change.length > 0 ? \" \" : \"disabled \"}`} onClick={copytext}>\r\n        {\" \"}\r\n        copy text\r\n      </button>\r\n      <button  className={`btn btn-primary mx-1 ${change.length > 0 ? \" \" : \"disabled \"}`} onClick={extratext}>\r\n        {\" \"}\r\n        remove extra space\r\n      </button>\r\n\r\n      <div className=\"container my-3\">\r\n        <h3\r\n          className={`text-capitalize text-${\r\n            props.mode === \"light\" ? \"dark\" : \"light\"\r\n          } mx-2`}\r\n        >\r\n          your text\r\n        </h3>\r\n        <p className={`text-${props.mode === \"light\" ? \"dark\" : \"light\"} mx-2`}>\r\n          {\" \"}\r\n          your word is {change.length} words and your charater is{\" \"}\r\n          {change.split(\" \").length}\r\n        </p>\r\n        <p className={`text-${props.mode === \"light\" ? \"dark\" : \"light\"} mx-2`}>\r\n          {change.length>0?  0.008 * change.split(\" \").length:\"Enter something\"} mitutes to read\r\n        </p>\r\n        <p className={`text-${props.mode === \"light\" ? \"dark\" : \"light\"} mx-2`}>\r\n          {change.length > 0 ? change : \"Enter something \"}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Formtext;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <div>\r\n      <div className={`navbar${props.mode}dark bg-${props.mode}`}>\r\n        <header className=\"d-flex text-light flex-wrap justify-content-center py-3 mb-4\">\r\n          <a\r\n            href=\"/\"\r\n            className=\"d-flex align-items-center mb-3 mb-md-0 me-md-auto text-dark text-decoration-none\"\r\n          >\r\n            <svg className=\"bi me-2\" width=\"40\" height=\"32\"></svg>\r\n            <span className={`fs-4 text-${props.mode===\"light\"?\"dark\":\"light\"} `}>Text Utility</span>\r\n          </a>\r\n\r\n          <ul className=\"nav nav-pills\">\r\n            <li className=\"nav-item\">\r\n              <NavLink exact to=\"/\" className=\"nav-link \" aria-current=\"page\">\r\n                Home\r\n              </NavLink>\r\n            </li>\r\n          \r\n          \r\n            \r\n\r\n            <div class=\"form-check form-switch my-2\">\r\n              <input\r\n                class=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onChange={props.toggle}\r\n              />\r\n              <label class={`form-check-label text-${props.mode===\"light\"?\"dark\":\"light\"} mx-2` } for=\"flexSwitchCheckDefault\">\r\n              {props.mode===\"light\"?\"dark mode\":\"light mode\"}\r\n                \r\n              </label>\r\n            </div>\r\n           \r\n          </ul>\r\n        </header>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import { useState } from \"react\";\nimport \"./App.css\";\nimport About from \"./Componenet/About\";\nimport Alert from \"./Componenet/Alert\";\nimport Formtext from \"./Componenet/Formtext\";\nimport Navbar from \"./Componenet/Navbar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  };\n  const toggleHandler = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"dark mode have been enable\", \"success\");\n    } else if (mode === \"dark\") {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"light mode have been enable\", \"success\");\n    }\n  };\n\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\">\n            <Navbar mode={mode} toggle={toggleHandler} />\n            <Alert alert={alert} />\n            <Formtext\n              heading=\"Enter your text analyze below\"\n              mode={mode}\n              showAlert={showAlert}\n            />\n          </Route>\n         \n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}